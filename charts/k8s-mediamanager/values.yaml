# Default values for k8s-mediamanager.
# This is a YAML-formatted file.

#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Alllow kubelet to automatically mount the ServiceAccount's Kubernetes API credentials?
  automount: false
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

general:
  ingress_host: k8s-mediamanager.k8s.test
  plex_ingress_host: k8s-plex.k8s.test
  #UID to run the process with
  puid: 1000
  #GID to run the process with
  pgid: 1000
  # timezone for the services
  timezone: "Etc/UTC"
  # IP family policy for services [ 'SingleStack', 'PreferDualStack', 'RequireDualStack' ]
  ipFamilyPolicy: PreferDualStack 
  # IP families for services : you can manualy specify the IP families you want to use for your services ['IPv4', 'IPv6']
  ipFamilies: []
  #media library storage and pathing configuration
  sharedStorage:
    annotations: 
      # by default the pv will not be deleted when the helm chart is uninstalled. You can change this to "delete" if you want the pv to be deleted.
      helm.sh/resource-policy: keep
    labels: {}
    accessModes: "ReadWriteMany"
    size: 5Gi
    storageClassName: "" # You need to specify the storage class that supports ReadWriteMany
    persistentVolumeClaim:
      claimName: "media-pvc"
    selector: {}
    # the paths, starting from the top level of the pv you're passing.
    subPaths:
      tv: media/tv
      movies: media/movies
      music: media/music
      downloads: downloads
  ingress:
    ingressClassName: ""

plex:
  enabled: true
  claim: "CHANGEME"
  hardwareAcceleration: false
  replicaCount: 1
  container:
    image: ghcr.io/onedr0p/plex
    tag: 1.41.0.8992-8463ad060
    nodeSelector: {}
    port: 32400
  service:
    type: ClusterIP # ClusterIP, NodePort, LoadBalancer
    port: 32400
    nodePort: # Only required if service type is NodePort
  ingress:
    enabled: true
    annotations: {}
    tls:
      enabled: false
      secretName: ""
  resources:
    requests:
      cpu: "500m"
      memory: "1Gi"
    limits:
      #cpu: "2"
      memory: "4Gi"
  volume: 
    name: plex-config
    accessModes: "ReadWriteOnce"
    storage: "1Gi"
    storageClassName: ""
  # We mount a memory volume to /transcode to speed up transcoding and save wear on the disk
  extraVolumes: {}
    # - name: plex-transcode
    #   emptyDir:
    #     medium: Memory
    #     sizeLimit: "16Gi"
  extraVolumeMounts: {}
    # - name: plex-transcode
    #   mountPath: /transcode
  tautulli:
    enabled: true
    container:
      image: ghcr.io/tautulli/tautulli
      tag: v2.14.4
      nodeSelector: {}
      port: 8181
    service:
      type: ClusterIP # ClusterIP, NodePort, LoadBalancer
      port: 8181
      nodePort: # Only required if service type is NodePort
    ingress:
      enabled: true
      path: /tautulli
      annotations: {}
      tls:
        enabled: false
        secretName: ""
    resources:
      requests:
        cpu: "50m"
        memory: "96Mi"
      limits:
        cpu: "150m"
        memory: "128Mi"
    volume:
      name: tautulli-config
      accessModes: "ReadWriteOnce"
      storage: "1Gi"
      storageClassName: ""
    extraVolumes: {}
    extraVolumeMounts: {}


prowlarr:
  enabled: true
  # hexadecimal api key for prowlarr. Change this value before deploying to production
  apiKey: "2ed654b2c1be4f51bde5981e70687b27"
  instanceName: Prowlarr
  container:
    image: ghcr.io/onedr0p/prowlarr
    tag: 1.23.1
    nodeSelector: {}
    port: 9696
  service:
    type: ClusterIP # ClusterIP, NodePort, LoadBalancer
    port: 9696
    nodePort: # Only required if service type is NodePort
  ingress:
    enabled: true
    annotations: {}
    path: /prowlarr
    tls:
      enabled: false
      secretName: ""
  resources:
    requests:
      cpu: "50m"
      memory: "128Mi"
    limits:
      cpu: "250m"
      memory: "512Mi"
  volume:
    name: prowlarr-config
    accessModes: "ReadWriteOnce"
    storage: "1Gi"
    storageClassName: ""
  extraVolumes: {}
  extraVolumeMounts: {}
  flaresolverr:
    enabled: true
    container:
      image: ghcr.io/flaresolverr/flaresolverr
      tag: v3.3.21
      nodeSelector: {}
      port: 8191
    service:
      type: ClusterIP # ClusterIP, NodePort, LoadBalancer
      port: 8191
      nodePort: # Only required if service type is NodePort
    resources:
      requests:
        cpu: "50m"
        memory: "128Mi"
      limits:
        cpu: "150m"
        memory: "1024Mi"
  metrics:
    image: ghcr.io/onedr0p/exportarr
    imageTag: v2.0.1
    enabled: true
    serviceMonitor: true
    port: 9090
    flaresolvarrMetrics:
      port: 9191
    backfill: true

radarr:
  enabled: true
  # hexadecimal api key for radarr. Change this value before deploying to production
  apiKey: "6a531c2df0144dbaa270892fba460d21" 
  instanceName: Radarr
  # apiSecret: xxx
  container:
    image: ghcr.io/onedr0p/radarr
    tag: 5.9.1
    nodeSelector: {}
    port: 7878
  service:
    type: ClusterIP # ClusterIP, NodePort, LoadBalancer
    port: 7878
    nodePort: # Only required if service type is NodePort
  ingress:
    enabled: true
    annotations: {}
    path: /radarr
    tls:
      enabled: false
      secretName: ""
  resources: 
    requests:
      cpu: "50m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  volume:
    name: radarr-config
    accessModes: "ReadWriteOnce"
    storage: "1Gi"
    storageClassName: ""
  extraVolumes: {}
  extraVolumeMounts: {}
  metrics:
    enabled: true
    image: ghcr.io/onedr0p/exportarr
    imageTag: v2.0.1
    serviceMonitor: true
    port: 9090

sonarr:
  enabled: true
  # hexadecimal api key for sonarr. Change this value before deploying to production
  apiKey: "438c234cca4e4784b1eecfc12ae69f33"
  instanceName: Sonarr
  container:
    image: ghcr.io/onedr0p/sonarr
    tag: 4.0.9
    nodeSelector: {}
    port: 8989
  service:
    type: ClusterIP # ClusterIP, NodePort, LoadBalancer
    port: 8989
    nodePort: # Only required if service type is NodePort
  ingress:
    enabled: true
    annotations: {}
    path: /sonarr
    tls:
      enabled: false
      secretName: ""
  resources: 
    requests:
      cpu: "50m"
      memory: "256Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  volume: 
    name: sonarr-config
    accessModes: "ReadWriteOnce"
    storage: "1Gi"
    storageClassName: ""
  extraVolumes: {}
  extraVolumeMounts: {}
  metrics:
    enabled: true
    image: ghcr.io/onedr0p/exportarr
    imageTag: v2.0.1
    serviceMonitor: true
    port: 9090

lidarr:
  enabled: true
  # hexadecimal api key for lidarr. Change this value before deploying to production
  apiKey: "438c234cca4e4784b1eabcde2ae69f33"
  instanceName: Lidarr
  container:
    image: ghcr.io/crutonjohn/lidarr-plugins
    tag: 2.6.0.4349
    nodeSelector: {}
    port: 8686
  service:
    type: ClusterIP # ClusterIP, NodePort, LoadBalancer
    port: 8686
    nodePort: # Only required if service type is NodePort
  ingress:
    enabled: true
    annotations: {}
    path: /lidarr
    tls:
      enabled: false
      secretName: ""
  resources:
    requests:
      cpu: "50m"
      memory: "128Mi"
    limits:
      cpu: "150m"
      memory: "256Mi"
  volume:
    name: lidarr-config
    accessModes: "ReadWriteOnce"
    storage: "1Gi"
    storageClassName: ""
  extraVolumes: {}
  extraVolumeMounts: {}
  metrics:
    image: ghcr.io/onedr0p/exportarr
    imageTag: v2.0.1
    enabled: true
    serviceMonitor: true
    port: 9090

transmission:
  enabled: false
  container:
    image: ghcr.io/onedr0p/transmission
    tag: 4.0.5
    nodeSelector: {}
    port:
      rpc: 9091
      peer: 11413
  service:
    rpc:
      type: ClusterIP   # ClusterIP, NodePort, LoadBalancer
      port: 9091
      nodePort:  # Only required if service type is NodePort
    peer:
      type: LoadBalancer   # ClusterIP, NodePort, LoadBalancer
      port: 11413       # Port for the peer service to listen on. Make sure this port is open on your cluster firewall/ingress
      nodePort:   # Only required if service type is NodePort
      nodePortUDP:  # Only required if service type is NodePort
  ingress:
    enabled: true
    annotations: {}
    path: /transmission
    tls:
      enabled: false
      secretName: ""
  config:
    auth:
      enabled: true
      username: "admin"
      password: "changeme1234"
  resources: 
    requests:
      cpu: "10m"
      memory: "32Mi"
    limits:
      cpu: "250m"
      memory: "256Mi"
  volume: 
    name: transmission-config
    accessModes: "ReadWriteOnce"
    storage: "1Gi"
    storageClassName: ""
  extraVolumes: {}
  extraVolumeMounts: {}
  metrics:
    enabled: true
    image: docker.io/evanofslack/transmission-exporter
    imageTag: latest
    serviceMonitor: true
    port: 19091

qbittorrent:
  enabled: true
  container:
    image: ghcr.io/onedr0p/qbittorrent
    tag: 4.6.7
    nodeSelector: {}
    port: 
      webui: 8080
      peer: 11413
  service:
    webui:
      type: ClusterIP   # ClusterIP, NodePort, LoadBalancer
      port: 8080
      nodePort:  # Only required if service type is NodePort
    peer:
      type: LoadBalancer   # ClusterIP, NodePort, LoadBalancer
      port: 11413       # Port for the peer service to listen on. Make sure this port is open on your cluster firewall/ingress
      nodePort:   # Only required if service type is NodePort
      nodePortUDP:  # Only required if service type is NodePort
  ingress:
    enabled: true
    annotations: {}
    path: /
    tls:
      enabled: false
      secretName: ""
  config:
    auth:
      username: "admin"
      password: "changeme1234"
  resources:
    requests:
      cpu: "50m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"
  volume:
    name: qbittorrent-config
    accessModes: "ReadWriteOnce"
    storage: "1Gi"
    storageClassName: ""
  extraVolumes: {}
  extraVolumeMounts: {}
  metrics:
    enabled: true
    image: ghcr.io/caseyscarborough/qbittorrent-exporter
    imageTag: v1.3.5
    serviceMonitor: true
    containerPort: 17871
    port: 9091
